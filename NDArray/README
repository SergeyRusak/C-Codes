Библеотека/Заголовочный файл/пустышка (как вам будет удобнее это называть) позволяет создавать, изменять и проводить различные операции с массивами n-размерности.

1) Создание многомерного массива
  Существует два варианта создания многомерного массива. 
  Первый: через динамическое количество параметров
    NDArray<int> test(3,2,3,4); // В итоге будет создан массив с размерностью 2 на 3 на 4 (первое число означает кол-во размерностей)
    принимаемые типы: целочисленные (int)
   
   Второй: через std::vector<int>
   std::vector<int> size;
   size.push_back(2);
   size.push_back(3);
   size.push_back(4); 
    NDArray<int> test2(size); // В итоге будет создан массив с размерностью 2 на 3 на 4
    
2) Обращение к элементу массива
  Существкет два варианта обращения к элементу:
    Первое: целочисленный индекс (является абсолютным индексом элемента в массиве) (в данном варианте многомерный массив представляется как линейный )
      test.set(5,3); // в итоге элемент с индексов 5 (или по многомерному индексу 0,1,1) примет значение 3
    Второй: использовать std::vector, размер которого совпадает с размерностью массива
   std::vector<int> size;
   size.push_back(0);
   size.push_back(1);
   size.push_back(1); 
   test2.get(size); // результат: 3
   
3) Доступные операции
    Операции заполнения
      void fill(T value) - заполнить текущий массив одним значением value
      static NDArray<T> one(std::vector<int> или int n, int ...) - создание массива определённого размера, заполненого единицами.
      static NDArray<T> zero(std::vector<int> или int n, int ...) - создание массива определённого размера, заполненого нулями.
      static NDArray<T> rand(std::vector<int> или int n, int ...) - создание массива определённого размера, заполненого случайными значениями от RAND_MIN до RAND_MAX
      
     Операторы доступа
     void set((std::vector<int>) или (int n, int ...), T value)  - установка значения
     void get((std::vector<int>) или (int n, int ...) ) - получение значения
     T& operator[]((std::vector<int>) или (int n, int ...)) - обращение к элементу
     
     NDArray<T>* operator= (NDArray<T> target) - оператор приравнивания
     NDArray<T>(NDArray<T> *target) - конструктор копирования
     
     Математические операторы
      NDArray<T> operator+ (NDArray<T> b)  - поэлементное сложение
      NDArray<T> operator- (NDArray<T> b)  - поэлементное вычитание
      NDArray<T> operator* (NDArray<T> b)  - поэлементное умножение
      NDArray<T> operator/ (NDArray<T> b)  - поэлементное деление
      NDArray<T> MatrixMultiply(NDArray<T> b) - матричное умножение
      
      
      
      
Наличие в данном ппректе сборочного файла MakeFile считаю излишним, ибо данная вещь не требует сборки, чтобы использовать в других программах.
А также данный кусок кода ни при каких обсоятельствах не заменит рабочую библеотеку NDArray для Python
